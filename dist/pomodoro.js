var t;exports.TaskStatus=void 0,(t=exports.TaskStatus||(exports.TaskStatus={}))[t.Todo=0]="Todo",t[t.Complete=1]="Complete",t[t.Cancelled=2]="Cancelled";class s{constructor(t,s){this.description=t,this.status=exports.TaskStatus.Todo,this.original_estimate=s,this.remaining_estimate=s,this.workLogs=[]}get active(){return this.status==exports.TaskStatus.Todo}cancel(){this.status=exports.TaskStatus.Cancelled}complete(){this.status=exports.TaskStatus.Complete}restart(){this.status=exports.TaskStatus.Todo}static deserialize(t){return"original_estimate"in t?Object.assign(new s("",0),t):Object.assign(new e(""),t)}}class e{constructor(t){this.description=t,this.active=!0,this.workLogs=[]}archive(){this.active=!1}unarchive(){this.active=!0}}class a{constructor(){this.tasks=[]}addTask(t){this.tasks.push(t)}createTask(t,e){let a=new s(t,e);this.addTask(a)}createOngoingTask(t){let s=new e(t);this.addTask(s)}get activeTasks(){return this.tasks.filter((t=>t.active))}static load(){let t=FileManager.iCloud(),s=t.joinPath(t.documentsDirectory(),"pomodoro/inventory.json");if(t.fileExists(s)){let e=t.readString(s),i=JSON.parse(e);return a.deserialize(i)}{let t=new a;return t.save(),t}}static deserialize(t){let e=new a;for(let a of t.tasks){let t=s.deserialize(a);e.addTask(t)}return e}save(){let t=FileManager.iCloud(),s=t.joinPath(t.documentsDirectory(),"pomodoro/inventory.json"),e=JSON.stringify(this);t.writeString(s,e)}}exports.ActivityInventory=a,exports.DailyLog=class{constructor(t,s,e,a=0){this.inventory=t,this.date=s,this.tasks=e,this.goal_pomodoros=a}get total_pomodoros(){return[...this.tasks.values()].reduce(((t,s)=>t+s),0)}},exports.OngoingTask=e,exports.Task=s;
